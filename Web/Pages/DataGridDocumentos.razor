@page "/Documentos"
@inject DocumentoAPI api

<MudTable ServerData="ServerReload" Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Documentos</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="nr_field" T="DocumentoResponse">Nº</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="sign_field" T="DocumentoResponse">CPF/CNPJ Emitente</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="name_field" T="DocumentoResponse">CPF/CNPJ Destinatário</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="position_field" T="DocumentoResponse">Código Verificador</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="mass_field" T="DocumentoResponse">Emissão</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nº">@context.NumeroDocumento</MudTd>
        <MudTd DataLabel="CPF/CNPJ Emitente">@context.CnpjCpfEmitente</MudTd>
        <MudTd DataLabel="CPF/CNPJ Destinatário">@context.CnpjCpfDestinatario</MudTd>
        <MudTd DataLabel="Código Verificador">@context.CodigoVerificador</MudTd>
        <MudTd DataLabel="Emissão">@context.DataHoraEmissao</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<DocumentoResponse> pagedData;
    private MudTable<DocumentoResponse> table;

    private int totalItems;
    private string searchString = null;

    private async Task<TableData<DocumentoResponse>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<DocumentoResponse> data = await api.GetDocumentosAsync();
        await Task.Delay(300, token);
        data = data.Where(doc =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (doc.CnpjCpfDestinatario.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (doc.CnpjCpfEmitente.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{doc.NumeroDocumento} {doc.CodigoVerificador} {doc.DataHoraEmissao}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.NumeroDocumento);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.CnpjCpfEmitente);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.CnpjCpfDestinatario);
                break;
            case "position_field":
                data = data.OrderByDirection(state.SortDirection, o => o.CodigoVerificador);
                break;
            case "mass_field":
                data = data.OrderByDirection(state.SortDirection, o => o.DataHoraEmissao);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<DocumentoResponse>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
