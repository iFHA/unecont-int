@page "/Documentos"
@inject DocumentoAPI api
@inject NavigationManager navigationManager

<MudButton Disabled="@_processingImport" OnClick="Importar" Variant="Variant.Filled" Color="Color.Primary">
    @if (_processingImport)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Importando</MudText>
    }
    else
    {
        <MudText>Importar Documentos</MudText>
    }
    </MudButton>
    <MudButton Disabled="@_processingDelete" OnClick="Remove" Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">
        @if (_processingDelete)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Removendo</MudText>
    }
    else
    {
        <MudText>Remover Todos</MudText>
    }
    </MudButton>
    <MudDataGrid Dense="true" @ref="dataGrid" T="DocumentoResponse" ServerData="ServerReload" Filterable="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Documentos</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="DocumentoResponse" InitiallyExpandedFunc="@((x) => false)" />
            <PropertyColumn Property="x => x.GetNFe().Prestador " Title="Prestador"/>
            <PropertyColumn Property="x => x.GetNFe().Tomador" Title="Tomador"/>
            <PropertyColumn Property="x => x.NumeroDocumento" Title="Nº NF"/>
            <PropertyColumn Sortable="false" CellStyle="text-align: center" Property="x => x.GetDataEmissaoFormatada()" Title="Emissão"/>
            <PropertyColumn Sortable="false" CellStyle="text-align: right" Property="x => FormatCurrency.FormatToCurrencyString(x.GetNFe().ValorNFe, 2)" Title="VL.NFe"/>
            @* <PropertyColumn CellStyle="text-align: right" Property="x => x.GetNFe().ValorINSS" Title="VL.INSS" /> *@
            @* <PropertyColumn CellStyle="text-align: right" Property="x => x.GetNFe().ValorISS" Title="VL.ISS" /> *@
            @* <PropertyColumn CellStyle="text-align: right" Property="x => x.GetNFe().ValorIRRF" Title="VL.IRRF" /> *@
            @* <PropertyColumn CellStyle="text-align: right" Property="x => x.GetNFe().ValorPIS" Title="VL.PIS" /> *@
            @* <PropertyColumn CellStyle="text-align: right" Property="x => x.GetNFe().ValorCOFINS" Title="VL.COFINS" /> *@
            @* <PropertyColumn CellStyle="text-align: right" Property="x => x.GetNFe().ValorCSLL" Title="CSLL" /> *@
            <PropertyColumn Sortable="false" CellStyle="text-align: right" Property="x => FormatCurrency.FormatToCurrencyString(x.GetNFe().TotalRetido(), 2)" Title="Tot.Ret."/>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Retenções</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>INSS @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().ValorINSS)</MudText>
                    <MudText>ISS @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().ValorISS)</MudText>
                    <MudText>IRRF @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().ValorIRRF)</MudText>
                    <MudText>PIS @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().ValorPIS)</MudText>
                    <MudText>COFINS @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().ValorCOFINS)</MudText>
                    <MudText>CSLL @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().ValorCSLL)</MudText>
                    <MudText>TOTAL RETIDO @FormatCurrency.FormatToCurrencyString(context.Item.GetNFe().TotalRetido())</MudText>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="DocumentoResponse" />
        </PagerContent>
    </MudDataGrid>

    @code {
    MudDataGrid<DocumentoResponse> dataGrid;
    private IEnumerable<DocumentoResponse> pagedData;
    private MudTable<DocumentoResponse> table;
    private bool _processingImport = false;
    private bool _processingDelete = false;

    private int totalItems;
    private string searchString = null;
    [Inject] private IDialogService DialogService { get; set; }

    private async Task<GridData<DocumentoResponse>> ServerReload(GridState<DocumentoResponse> state)
    {
        IEnumerable<DocumentoResponse> data = await api.GetDocumentosAsync();
        await Task.Delay(300);

        data = data.Where(doc =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (FormatCnpjCpf.RemoveFormat(doc.CnpjCpfDestinatario).Contains(FormatCnpjCpf.RemoveFormat(searchString), StringComparison.OrdinalIgnoreCase))
                return true;
            if (FormatCnpjCpf.RemoveFormat(doc.CnpjCpfDestinatario).Contains(FormatCnpjCpf.RemoveFormat(searchString), StringComparison.OrdinalIgnoreCase))
                return true;
            if (doc.GetNFe().Prestador.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (doc.GetNFe().Tomador.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{doc.NumeroDocumento} {doc.CodigoVerificador} {doc.GetDataEmissaoFormatada()}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(DocumentoResponse.NumeroDocumento):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.NumeroDocumento
                    );
                    break;
                case nameof(DocumentoResponse.CnpjCpfEmitente):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.CnpjCpfEmitente
                    );
                    break;
                case nameof(DocumentoResponse.CnpjCpfDestinatario):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.CnpjCpfDestinatario
                    );
                    break;
                case nameof(DocumentoResponse.GetDataEmissaoFormatada):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.DataEmissaoToDateTime()
                    );
                    break;
            }
        }
        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<DocumentoResponse>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task Importar()
    {
        _processingImport = true;
        await api.ImportDocumentosAsync();
        _processingImport = false;
        await dataGrid.ReloadServerData();
    }
    private async Task Remove()
    {
        _processingDelete = true;
        bool? result = await DialogService.ShowMessageBox(
        "Atenção!",
        "Tem certeza que deseja apagar tudo?",
        yesText: "Deletar!", cancelText: "Cancelar");
        bool cancelado = result == null;
        if (cancelado)
        {
            _processingDelete = false;
            return;
        }
        await api.DeleteDocumentoAsync();
        _processingDelete = false;
        await dataGrid.ReloadServerData();
    }
}
