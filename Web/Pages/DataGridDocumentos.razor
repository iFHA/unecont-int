@page "/Documentos"
@inject DocumentoAPI api

<MudDataGrid @ref="dataGrid" T="DocumentoResponse" ServerData="ServerReload" Filterable="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Documentos</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.NumeroDocumento" Title="Nº" />
        <PropertyColumn Property="x => x.CnpjCpfEmitente" Title="CPF/CNPJ Emitente" />
        <PropertyColumn Property="x => x.CnpjCpfDestinatario" Title="CPF/CNPJ Destinatário" />
        <PropertyColumn Property="x => x.CodigoVerificador" Title="Código Verificador" />
        <PropertyColumn Property="x => x.DataHoraEmissao" Title="Emissão" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="DocumentoResponse" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<DocumentoResponse> dataGrid;
    private IEnumerable<DocumentoResponse> pagedData;
    private MudTable<DocumentoResponse> table;

    private int totalItems;
    private string searchString = null;

    private async Task<GridData<DocumentoResponse>> ServerReload(GridState<DocumentoResponse> state)
    {
        IEnumerable<DocumentoResponse> data = await api.GetDocumentosAsync();
        await Task.Delay(300);

        data = data.Where(doc =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (doc.CnpjCpfDestinatario.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (doc.CnpjCpfEmitente.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{doc.NumeroDocumento} {doc.CodigoVerificador} {doc.DataHoraEmissao}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(DocumentoResponse.NumeroDocumento):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.NumeroDocumento
                    );
                    break;
                case nameof(DocumentoResponse.CnpjCpfEmitente):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.CnpjCpfEmitente
                    );
                    break;
                case nameof(DocumentoResponse.CnpjCpfDestinatario):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.CnpjCpfDestinatario
                    );
                    break;
                case nameof(DocumentoResponse.CodigoVerificador):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.CodigoVerificador
                    );
                    break;
                case nameof(DocumentoResponse.DataHoraEmissao):
                    data = data.OrderByDirection(
                    sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                    o => o.DataHoraEmissao
                    );
                    break;
            }
        }
        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<DocumentoResponse>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }
}
